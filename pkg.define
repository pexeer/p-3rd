#!/usr/bin/env bash

SRC_DIR=$WORK_DIR/src
PREFIX_DIR=$WORK_DIR/installed
PKG_DIR=$WORK_DIR/pkg

#################################################
PKG_LIST="gtest gflags protobuf protobuf3 zlib isa-l gperf libunwind rapidjson"
#################################################
PKG_DEFAULT_LIST="gtest gflags protobuf3 gperf libunwind"
## download pkg from internet
download_pkg() {
    local file_url=0
    local file_path=$PKG_DIR/${1}.zip
    local src_path=$SRC_DIR/$1
    eval file_url="\$URL_$1"
    if [ -z "$file_url" ]; then
        return 0
    fi
    if [ -e $file_path ]; then
        echo "skip downald "$1.zip
    else
        wget $file_url -O $file_path
    fi
    rm -rf $src_path
    unzip $file_path -d $src_path
    cd $src_path && mv -f * $1
    cd $WORK_DIR
}
## for googletest
URL_gtest='https://github.com/google/googletest/archive/master.zip'
BUILD_gtest() {
    local build_path=$SRC_DIR/gtest/gtest
    cmake $build_path -DCMAKE_INSTALL_PREFIX=$PREFIX_DIR
    make
    make -j$PARALLEL install
}
## for google gflags
URL_gflags='https://github.com/gflags/gflags/archive/v2.1.2.zip'
BUILD_gflags() {
    local build_path=$SRC_DIR/gflags/gflags
    cmake $build_path -DCMAKE_INSTALL_PREFIX=$PREFIX_DIR
    make -j$PARALLEL install
}
## for zlib
URL_zlib='https://github.com/madler/zlib/archive/v1.2.8.zip'
BUILD_zlib() {
    local build_path=$SRC_DIR/zlib/zlib
    cmake $build_path -DCMAKE_INSTALL_PREFIX=$PREFIX_DIR
    make -j$PARALLEL install
}

## for protobuf
URL_protobuf=https://github.com/google/protobuf/archive/v2.6.1.zip
BUILD_protobuf() {
    local build_path=$SRC_DIR/protobuf/protobuf
    if [ -f $PKG_DIR/gmock-1.7.0.zip ]; then
        rm -rf $PKG_DIR/gmock-1.7.0
        unzip $PKG_DIR/gmock-1.7.0.zip -d $build_path
        mv $build_path/gmock-1.7.0/gtest $build_path/gtest
    fi
    cd $build_path
    bash autogen.sh
    ./configure --prefix=$PREFIX_DIR --disable-shared
    make -j$PARALLEL install
}

## for protobuf3
URL_protobuf3='https://github.com/google/protobuf/archive/v3.2.0.zip'
BUILD_protobuf3() {
    local build_path=$SRC_DIR/protobuf3/protobuf3
    if [ -f $PKG_DIR/gmock-1.7.0.zip ]; then
        unzip $PKG_DIR/gmock-1.7.0.zip -d $build_path
        mv $build_path/gmock-1.7.0 $build_path/gmock
    fi
    cd $build_path
    bash autogen.sh
    ./configure --prefix=$PREFIX_DIR --disable-shared
    make -j$PARALLEL install
}

## for isa-l
URL_isa_l='https://github.com/01org/isa-l/archive/v2.17.0.zip'
BUILD_isa_l() {
    local build_path=$SRC_DIR/isa_l/isa_l
    cd $build_path
    bash autogen.sh
    ./configure --prefix=$PREFIX_DIR --disable-shared
    make -j$PARALLEL install
}

## for gperf
URL_gperf='https://github.com/gperftools/gperftools/archive/gperftools-2.5.zip'
BUILD_gperf() {
    local build_path=$SRC_DIR/gperf/gperf
    cd $build_path
    bash autogen.sh
    ./configure --prefix=$PREFIX_DIR --disable-shared
    make -j$PARALLEL install
}

# for libunwind
URL_libunwind='https://github.com/libunwind/libunwind/archive/v1.2.1.zip'
BUILD_libunwind() {
    local build_path=$SRC_DIR/libunwind/libunwind
    cd $build_path
    bash autogen.sh
    ./configure --prefix=$PREFIX_DIR --disable-shared
    make -j$PARALLEL install
}

# for rapidjson
URL_rapidjson="https://github.com/miloyip/rapidjson/archive/v1.1.0.zip"
BUILD_rapidjson() {
    local build_path=$SRC_DIR/rapidjson/rapidjson
    cd $build_path
    cmake $build_path -DCMAKE_INSTALL_PREFIX=$PREFIX_DIR
    make
    make -j$PARALLEL install
}

#################################################

# export some varibales
export PATH=$PATH:$PREFIX_DIR/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PREFIX_DIR/lib
export LIBRARY_PATH=$LIBRARY_PATH:$PREFIX_DIR/lib
for x in $PKG_LIST; do
    x=${x/-/_}
    declare F_$x=1
done

